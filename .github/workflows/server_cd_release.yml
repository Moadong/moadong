name: Release Server CD

on:
  push:
    branches:
      - 'main'
  workflow_dispatch:

env:
  ECR_REGISTRY: ${{ secrets.AWS_ECR_REGISTRY }}
  ECR_REPOSITORY: ${{ secrets.AWS_ECR_REPOSITORY_NAME }}
  IMAGE_TAG: ${{ github.sha }}

jobs:
  build-and-push:
    name: Build and Push All Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
      
      - name: Grant execute permission for gradlew
        run: chmod +x ./backend/gradlew
      
      # Oracle 서버 빌드에만 필요하므로 주석 처리
      # - name: Make application.properties for Oracle Server
      #   run: |
      #     cd ./backend/src/main/resources
      #     echo "${{ secrets.APPLICATION_PROD_RELEASE }}" > ./application.properties

      - name: Build with Gradle
        run: |
          cd backend
          ./gradlew clean build -x test

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # Oracle 서버(Docker Hub) 배포에만 필요하므로 주석 처리
      # - name: Log in to Docker Hub
      #   uses: docker/login-action@v2
      #   with:
      #     username: ${{ secrets.SERVER_DOCKER_USERNAME }}
      #     password: ${{ secrets.SERVER_DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and Push Docker Image to ECR
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          platforms: linux/arm64,linux/amd64
          push: true
          tags: |
            ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
            ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest

  # Oracle 서버 배포 잡 전체를 주석 처리
  # deploy-to-oracle:
  #   name: Deploy to Oracle Server
  #   runs-on: ubuntu-latest
  #   needs: build-and-push # 빌드 잡이 성공해야 실행
  #
  #   steps:
  #     - name: Update Container on Oracle via SSH
  #       uses: appleboy/ssh-action@master
  #       with:
  #         host: ${{ secrets.ORACLE_INSTANCE_RELEASE_IP }}
  #         username: ${{ secrets.ORACLE_INSTANCE_USER }}
  #         key: ${{ secrets.ORACLE_INSTANCE_RELEASE_PRIVATE_KEY }}
  #         port: ${{ secrets.ORACLE_INSTANCE_RELEASE_PORT }}
  #         script: |
  #           docker pull ${{ secrets.DOCKER_IMAGE_RELEASE }}:latest
  #           
  #           export USERNAME=${{ secrets.ORACLE_INSTANCE_USER }}
  #           export DOCKER_APP_IMAGE=${{ secrets.DOCKER_IMAGE_RELEASE }}:latest
  #           sudo chmod +x /home/${{ secrets.ORACLE_INSTANCE_USER }}/deploy.sh
  #           sudo -E /home/${{ secrets.ORACLE_INSTANCE_USER }}/deploy.sh
  #           
  #           docker image prune -af

  deploy-to-kubernetes:
    name: Deploy to Kubernetes with Blue/Green
    runs-on: ubuntu-latest # 표준 Runner 사용 권장
    needs: build-and-push

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Kustomize and kubectl
        uses: imranismail/setup-kustomize@v2
      - uses: azure/setup-kubectl@v3
      
      # 표준 Runner 사용 시 kubeconfig 설정 필수
      - name: Setup kubeconfig
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBE_CONFIG_DATA }}" | base64 -d > ~/.kube/config
          chmod 600 ~/.kube/config

      - name: Apply All Resources and Deploy
        env:
          APPLICATION_PROD_RELEASE: ${{ secrets.APPLICATION_PROD_RELEASE }}
        run: |
          # 1. Kustomize 배포 디렉터리로 이동
          cd k8s/overlays/production

          # 2. 이미지 태그 동적 변경
          echo "INFO: Updating image tag to ${{ env.IMAGE_TAG }} in kustomization..."
          kustomize edit set image placeholder/spring-server=${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}

          # 3. Kustomize로 모든 리소스(Secret, Deployment, Service, Ingress)를 한 번에 생성/업데이트
          echo "INFO: Applying all resources via Kustomize..."
          kustomize build . | kubectl apply -f -
          
          # --- 아래 블루/그린 로직은 별도로 관리하는 것이 더 좋지만, 현재 구조를 유지한다면 ---

          # 4. 새롭게 배포할 색상 결정
          # Ingress가 없으면 blue, 있으면 반대 색상
          if ! kubectl get ingress spring-server-ingress > /dev/null 2>&1; then
            NEW_COLOR="blue"
          else
            LIVE_COLOR=$(kubectl get ingress spring-server-ingress -o jsonpath='{.spec.rules[0].http.paths[0].backend.service.name}' | cut -d'-' -f3)
            if [ "$LIVE_COLOR" == "blue" ]; then NEW_COLOR="green"; else NEW_COLOR="blue"; fi
          fi
          
          # 5. 새로 배포된 Deployment 헬스체크
          echo "INFO: Waiting for '$NEW_COLOR' deployment to be ready..."
          kubectl rollout status deployment/spring-server-$NEW_COLOR --timeout=5m

          # 6. 헬스체크 통과 후, Ingress 트래픽을 새 버전으로 전환
          echo "INFO: Health check passed. Switching Ingress traffic to '$NEW_COLOR'..."
          kubectl patch ingress spring-server-ingress --type='json' -p='[{"op": "replace", "path": "/spec/rules/0/http/paths[0]/backend/service/name", "value":"spring-server-'$NEW_COLOR'-svc"}]'

          echo "INFO: Deployment process finished successfully."