name: Create Jira issue

on:
  issues:
    types:
      - opened

jobs:
  create-issue:
    if: contains(github.event.issue.body, '🎟️ 상위 작업 (Ticket Number)')
    name: Create Jira issue
    runs-on: ubuntu-latest

    steps:
      - name: Login
        uses: atlassian/gajira-login@v3
        env:
          JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
          JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}
          JIRA_PROJECT_KEY: ${{ secrets.JIRA_PROJECT_KEY }}

      - name: Checkout main code
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Issue Parser
        uses: stefanbuck/github-issue-parser@v3
        id: issue-parser
        with:
          template-path: .github/ISSUE_TEMPLATE/jira-issue-form.yml

      - name: Check if base branch exists
        id: check-branch
        run: |
          BASE_BRANCH="${{ steps.issue-parser.outputs.issueparser_baseBranch }}"
          echo "Checking branch: $BASE_BRANCH"
          if git ls-remote --exit-code origin "refs/heads/${BASE_BRANCH}"; then
            echo "BRANCH_EXISTS=true" >> $GITHUB_ENV
          else
            echo "BRANCH_EXISTS=false" >> $GITHUB_ENV
          fi

      - name: Convert markdown to Jira Syntax
        uses: peter-evans/jira2md@v1
        id: md2jira
        with:
          input-text: |
            ### Github Issue Link
            - ${{ github.event.issue.html_url }}

            ${{ github.event.issue.body }}
            
      - name: Lookup Jira User Account ID in Project
        id: lookup-jira-user
        # issue-parser가 담당자 사용자 이름을 제공한 경우에만 실행
        if: steps.issue-parser.outputs.issueparser_assignee != ''
        run: |
          JIRA_USERNAME_TO_SEARCH="${{ steps.issue-parser.outputs.issueparser_assignee }}"
          JIRA_API_TOKEN="${{ secrets.JIRA_API_TOKEN }}"
          JIRA_BASE_URL="${{ secrets.JIRA_BASE_URL }}"
          JIRA_USER_EMAIL="${{ secrets.JIRA_USER_EMAIL }}"
          PROJECT_KEY="${{ secrets.JIRA_PROJECT_KEY }}"

          echo "Searching for Jira user '$JIRA_USERNAME_TO_SEARCH' assignable to project '$PROJECT_KEY'"

          # Jira API 호출: 특정 프로젝트에 할당 가능한 사용자 검색
          # API 응답은 JSON 배열 형태이며, 첫 번째 일치하는 사용자의 accountId를 가져옴
          # 오류 처리: 사용자를 찾지 못하면 ACCOUNT_ID는 빈 문자열이 됨
          ACCOUNT_ID=$(curl -s -u "${JIRA_USER_EMAIL}:${JIRA_API_TOKEN}" \
            -H "Accept: application/json" \
            "${JIRA_BASE_URL}/rest/api/3/user/assignable/search?projectKeys=${PROJECT_KEY}&query=${JIRA_USERNAME_TO_SEARCH}" | \
            jq -r '.[0].accountId // empty') # jq: 첫 번째 결과의 accountId, 없으면 empty

          if [ -z "$ACCOUNT_ID" ]; then
            echo "::warning::Jira user '$JIRA_USERNAME_TO_SEARCH' not found or not assignable to project '$PROJECT_KEY'."
            echo "jira_account_id=" >> $GITHUB_OUTPUT
          else
            echo "Found Jira Account ID: $ACCOUNT_ID for user '$JIRA_USERNAME_TO_SEARCH' assignable to project '$PROJECT_KEY'"
            echo "jira_account_id=$ACCOUNT_ID" >> $GITHUB_OUTPUT
          fi
        shell: bash
            
      - name: Build fields JSON
        id: issue-fields
        run: |
          EPIC_ID="${{ steps.issue-parser.outputs.issueparser_parentKey }}"
          DUE_DATE="${{ steps.issue-parser.outputs.issueparser_dueDate }}"
          DESCRIPTION="${{ steps.md2jira.outputs.output-text }}"
          LOOKED_UP_ASSIGNEE_ACCOUNT_ID="${{ steps.lookup-jira-user.outputs.jira_account_id }}"

          _fields_json=$(jq -nc \
            --arg parent "$EPIC_ID" \
            --arg description "$DESCRIPTION" \
            '{
              parent: { key: $parent },
              description: $description
            }'
          )
          # 마감 기한 추가
          if [ -n "$DUE_DATE" ]; then
            _fields_json=$(echo "$FIELDS_JSON" | jq --arg duedate "$DUE_DATE" -c '. + { duedate: $duedate }')
          fi

          # 담당자 추가 (템플릿에서 입력받은 값이 있을 경우)
          if [ -n "$LOOKED_UP_ASSIGNEE_ACCOUNT_ID" ]; then
            _fields_json=$(echo "$_fields_json" | jq --arg assignee_id "$LOOKED_UP_ASSIGNEE_ACCOUNT_ID" -c '. + { assignee: { accountId: $assignee_id } }')
          else
            echo "Jira assignee will not be set as Account ID was not found or provided."
          fi
          
          _final_fields_json=$(echo "$_fields_json" | jq -c '.')
          echo "fields=$_final_fields_json" >> $GITHUB_OUTPUT    

      - name: Create Jira Issue
        if: startsWith(steps.issue-parser.outputs.issueparser_parentKey, 'MOA-') && env.BRANCH_EXISTS == 'true'
        id: create
        uses: atlassian/gajira-create@v3
        with:
          project: MOA
          issuetype: Task
          summary: '${{ github.event.issue.title }}'
          description: '${{ steps.md2jira.outputs.output-text }}'
          fields: '${{ steps.issue-fields.outputs.fields }}'

      - name: Log created issue
        if: startsWith(steps.issue-parser.outputs.issueparser_parentKey, 'MOA-') && env.BRANCH_EXISTS == 'true'
        run: echo "Jira Issue ${{ steps.create.outputs.issue || 'UNKNOWN' }} was created"

      - name: Checkout base branch
        if: startsWith(steps.issue-parser.outputs.issueparser_parentKey, 'MOA-') && env.BRANCH_EXISTS == 'true'
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.issue-parser.outputs.issueparser_baseBranch }}

      - name: Create branch with Jira Ticket number
        if: startsWith(steps.issue-parser.outputs.issueparser_parentKey, 'MOA-') && env.BRANCH_EXISTS == 'true'
        run: |
          GITHUB_ISSUE_NUMBER="${{ github.event.issue.number }}"
          JIRA_ISSUE_KEY="${{ steps.create.outputs.issue }}"
          CUSTOM_BRANCH_NAME="${{ steps.issue-parser.outputs.issueparser_branch }}"

          SAFE_BRANCH_NAME=$(echo "${CUSTOM_BRANCH_NAME}" | tr ' ' '-' | tr -cd '[:alnum:]/-')
          BRANCH_TYPE=$(echo "${SAFE_BRANCH_NAME}" | cut -d'/' -f1)
          BRANCH_DETAIL=$(echo "${SAFE_BRANCH_NAME}" | cut -d'/' -f2-)

          if [ -z "$BRANCH_DETAIL" ]; then
            BRANCH_DETAIL="$BRANCH_TYPE"
          fi

          BRANCH_NAME="${BRANCH_TYPE}/#${GITHUB_ISSUE_NUMBER}-${BRANCH_DETAIL}-${JIRA_ISSUE_KEY}"

          git checkout -b "${BRANCH_NAME}"
          git push origin "${BRANCH_NAME}"

      - name: Define ISSUE_NUMBER fallback
        if: startsWith(steps.issue-parser.outputs.issueparser_parentKey, 'MOA-') && env.BRANCH_EXISTS == 'true'
        run: |
          echo "ISSUE_NUMBER=${{ steps.create.outputs.issue || 'UNKNOWN' }}" >> $GITHUB_ENV

      - name: Update GitHub Issue Title
        if: startsWith(steps.issue-parser.outputs.issueparser_parentKey, 'MOA-') && env.BRANCH_EXISTS == 'true'
        run: |
          CUSTOM_BRANCH_NAME="${{ steps.issue-parser.outputs.issueparser_branch }}"
          JIRA_ISSUE_KEY="${{ steps.create.outputs.issue }}"
          ISSUE_TITLE="${{ github.event.issue.title }}"
          BRANCH_TYPE=$(echo "${CUSTOM_BRANCH_NAME}" | cut -d'/' -f1)

          NEW_TITLE="[${BRANCH_TYPE}] ${JIRA_ISSUE_KEY} ${ISSUE_TITLE}"
          echo "NEW_TITLE=${NEW_TITLE}" >> $GITHUB_ENV

      - name: Apply new title
        if: startsWith(steps.issue-parser.outputs.issueparser_parentKey, 'MOA-') && env.BRANCH_EXISTS == 'true'
        uses: actions-cool/issues-helper@v3
        with:
          actions: 'update-issue'
          token: ${{ secrets.GITHUB_TOKEN }}
          title: '${{ env.NEW_TITLE }}'

      - name: Add comment with Jira issue link
        if: startsWith(steps.issue-parser.outputs.issueparser_parentKey, 'MOA-') && env.BRANCH_EXISTS == 'true'
        uses: actions-cool/issues-helper@v3
        with:
          actions: 'create-comment'
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.issue.number }}
          body: 'Jira Issue Created: [${{ env.ISSUE_NUMBER }}](${{ secrets.JIRA_BASE_URL }}/browse/${{ env.ISSUE_NUMBER }})'
