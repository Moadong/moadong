# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a package using Gradle and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java/blob/main/docs/advanced-usage.md#Publishing-using-gradle

name: Java CD with Gradle

on:
  push:
    branches: ["develop/be", "main", "CICD/#9-apply_cicd"]
    paths: ["backend/**"]

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0

    - name: make application-prod.properties
      run: | 
        cd ./backend/src/main/resources
        touch ./application-prod.properties
        echo "${{ secrets.APPLICATION_PROD }}" > ./application-prod.properties

    - name: Grant execute permission for gradlew
      run: chmod +x ./backend/gradlew

    - name: Build with Gradle
      run: |
        cd backend
        ./gradlew clean build -x test

    - name: create-json
      id: create-json
      uses: jsdaniell/create-json@v1.2.2
      with:
        name: "gce_sa_key.json"
        json: ${{ secrets.GCE_SA_KEY }}

    # Google Cloud CLI 설정
    - name: Set up Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        service_account_key: ./gce_sa_key.json
        project_id: ${{ secrets.GCE_PROJECT }}
        
    # Docker 인증
    - name: Authenticate Docker to Google Cloud Container Registry (GCR)
      run: |
        gcloud auth activate-service-account --key-file=./gce_sa_key.json
        gcloud auth configure-docker gcr.io

   # Docker 이미지 빌드 및 GCR 업로드
    - name: Build and Push Docker Image
      run: |
        cd backend
        docker build -t ${{ secrets.DOCKER_IMAGE }} .
        docker push ${{ secrets.DOCKER_IMAGE }}

    # VM에서 컨테이너 업데이트
    - name: Update Container on VM
      run: |
        gcloud compute ssh ${{ secrets.GCE_INSTANCE }} --zone=${{ secrets.GCP_REGION }} --command="
        sudo usermod -aG docker $USER
        newgrp docker
        gcloud auth configure-docker
        gcloud auth activate-service-account --key-file=./gce_sa_key.json
        docker pull ${{ secrets.DOCKER_IMAGE }} &&
        docker stop ${{ secrets.DOCKER_IMAGE }} || true &&
        docker rm ${{ secrets.DOCKER_IMAGE }} || true &&
        docker run -d --name ${{ secrets.DOCKER_IMAGE }} -p 8080:8080 ${{ secrets.DOCKER_IMAGE }}"

#     - name: Docker build
#       run: |
#         cd backend
#         docker login -u ${{ secrets.SERVER_DOCKER_USERNAME }} -p ${{ secrets.SERVER_DOCKER_PASSWORD }}
#         docker build -t app .
#         docker tag app ${{ secrets.SERVER_DOCKER_USERNAME }}/moadong_be:latest
#         docker push ${{ secrets.SERVER_DOCKER_USERNAME }}/moadong_be:latest
